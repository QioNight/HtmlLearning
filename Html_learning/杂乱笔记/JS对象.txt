		JavaScript

		
1、预处理 (创建执行环境对象 声明加入对象)
2、代码执行
--------------------------------------
-- 静态作用域 预处理时就确定 ------
没有块作用域
没有动态作用域
--------------------------------------
创建函数对象 创建一个作用域对象 f[[scope]]
-- 作用域链 ------
f.env -> f.scope -> ... -> window

信息隐藏

闭包   
	是个对象(chrome closure)
1、子函数可访问父函数的变量
2、子函数可访问父函数的变量，即使子函数离开父函数环境
3、子函数没有用到父函数的东西但是用到了父函数的父函数的东西
4、注意有些书上讲，要把子函数返回到外面,再调用访问父函数里面的变量产生闭包,其实不返回也产生闭包

子函数调用时，子函数的预处理阶段产生闭包


闭包的好处：
1、减少全局变量 (全局变量 -> 污染全局空间)
2、减少传递函数的参数
	//cal(2, 3) = 2+1+2+3 base = 2, max = 3
	function cal(base) {
		return function(max) {
			var add = 0;
			for(var i=0; i<=max; i++) {
				add += i;
			}
			return add + base;
		}
	}
	var Add = cal(2);
	console.log( Add(3) );
	
3、封装
	(function() {
		var price = 0;
		function getPrice() {
			return price;
		}
		function setPrice(val) {
			price = val * 0.5;
		}
		window.setPrice = setPrice;
		window.getPrice = getPrice;
	})()
	setPrice(200);
	console.log( getPrice() );
	
闭包使用的注意点：
1、对捕获的变量只是个引用,不是复制
2、父函数每调用一次，会产生不同的闭包
3、循环问题 (JS没有块作用域 循环中时 注意i的取值问题)
	<div id="1">1</div>
	<div id="2">2</div>
	<div id="3">3</div>
	<script>
		for(var i=1; i<=3; i++) {
			var el = document.getElementById(i);
			el.onclick = (function(id) {
				return function() {
					alert(id);
				}
			})(i) //形成闭包，每次i取值变化时，都会返回一个相应的函数
		}
	</script>

Object.defineProperty定义和修改属性(-s 添加多个属性)
	//默认是只读


创建对象  ( 判断一个变量是不是对象 instanceof )
	1、字面量
		var p = {}
		
	2、Object
		var p = new Object()
			new 创建一个对象 在堆分配一个空间
				(带new的函数叫 构造函数 \构造器)
			Object 函数
			
	3、添加属性
		属性：值， 对象， 函数
		
	4、对象的操作
		访问成员(属性)
		成员的遍历 for( in ) {}
		输出成员的所有属性 Object.keys()
		
	5、构造器
		Object.constructor  //查看构造器

		对象都有一个构造器
		构造器即是函数，也是对象

		顶级构造器 Function (它的构造器就是它本身)
			可构造  1、Object
						{}用字面量创建
						new Object()
					2、Number
						var a = 1;
						var a = new Number( 1 );
					3、Array
			( 内置引用类型 叫法 1、构造器/构造函数
								2、对象定义的类型
								3、对象的定义称为类 )
					
					
	6、对象工厂
		1、创建相同对象，只是把对象的属性简单复制
		2、对于共享的属性效率不高
	
	7、使用构造器
		1、定义的函数是做构造器 函数名第一个字母 大写
		2、构造器内部使用 this 代表

和原型有关
	prototype  函数的原型对象
		( 只有函数才有 )
		Object.constructor.prototype.common (可以找到共有的)

	__proto__  指向构造函数原型的指针
		( 对象才有的隐藏属性 )

this
	1、写在哪里
		全局域、函数域、DOM
	2、指向原则
		1、运行时决定，不是代码决定
		2、函数是谁调用，this 就指向谁
	3、改变this 指向
		1、call( Object, "", "" )
		2、apply( Object, [ "", "" ] )
			function fn(a, b) {
				this.a = a;
				this.b = b;
			}
			fn.call( f, "a", "b" );
			fn.apply( f, [ "a", "b" ] );

封装
	1、命名空间
	
	2、成员封装
		实例级别
		静态级别


	

	
	
	